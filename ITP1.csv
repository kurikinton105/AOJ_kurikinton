ITLP1,1,A,ITP1_1_A,"
<H1>Hello World</H1><br>

<p>
オンラインジャッジへようこそ。
</p>

<p>
このコースでは、プログラミングを始めたばかりの方向けの初級問題にチャレンジします。各問題には解説やヒントが与えられていますので参考にしてください。
</p>
<!--
このコースである程度力を身に付けたら、Volume の問題にチャレンジしてみましょう。
-->
<p>
まずは、慣例に従って Hello World を作成してみましょう。
</p>

<p>
""Hello World"" と標準出力にプリントするプログラムを作成してください。
</p>

<H2>Note</H2>

<p>
Javaのプログラムを提出する場合は、'Main'という名前のクラスを作成してください。クラスMainの中にプログラムの起点となるmainメソッドを記述します。
</p>

<H2>Input</H2>
<p>
この問題に入力はありません。
</p>


<H2>Output</H2>

<p>
""Hello World"" と一行に出力してください。
</p>

<p>
最後の改行を忘れないようにしましょう。必要な空白や改行がなかったり、余計な空白や改行を出力すると'Presentation Error'となり不正解になってしまいますので、注意してください。
</p>

<H2>Sample Input</H2>

<pre>
No input
</pre>

<H2>Sample Output</H2>

<pre>
Hello World
</pre>"
ITLP1,1,B,ITP1_1_B,"
<H1>x の 3 乗</H1><br>

<p>
１つの整数 <i>x</i> を読み込んで、<i>x</i> の３乗を計算し結果を出力するプログラムを作成して下さい。
</p>


<H2>Input</H2>
<p>
入力として１つの整数 <i>x</i> が与えられます。
</p>


<H2>Output</H2>

<p>
<i>x</i> の３乗の計算結果を１行に出力して下さい。最後の改行を忘れないようにしましょう。
</p>

<h2>Constraints</h2>

<p>
Constraints (制約)には、採点に使用される入力データの上限などの情報が書かれています。
変数の型を選ぶときや、アルゴリズムを考えるときに必要な情報になります。この問題に関する制約は以下の通りとなります：
</p>

<ul>
<li> 1 &le; <i>x</i> &le; 100 </li>
</ul>



<H2>Sample Input 1</H2>

<pre>
2
</pre>


<H2>Sample Output 1</H2>

<pre>
8
</pre>

<H2>Sample Input 2</H2>

<pre>
3
</pre>


<H2>Sample Output 2</H2>

<pre>
27
</pre>"
ITLP1,1,C,ITP1_1_C,"
<H1>長方形の面積と周の長さ</H1><br>

<p>
たて <i>a</i> cm よこ <i>b</i> cm の長方形の面積と周の長さを求めるプログラムを作成して下さい。
</p>


<H2>Input</H2>
<p>
<i>a</i> と <i>b</i> が１つの空白で区切られて与えられます。
</p>


<H2>Output</H2>

<p>
面積と周の長さを１つの空白で区切って１行に出力して下さい。
</p>

<h2>Constraints</h2>

<ul>
<li> 1 &le; <i>a</i>, <i>b</i> &le; 100</li>
</ul>


<H2>Sample Input</H2>

<pre>
3 5
</pre>

<H2>Sample Output</H2>

<pre>
15 16
</pre>
"
ITLP1,1,D,ITP1_1_D,"
<H1>時計</H1><br>

<p>
秒単位の時間 $S$ が与えられるので、$h$:$m$:$s$ の形式へ変換して出力してください。ここで、$h$ は時間、$m$ は 60 未満の分、$s$ は 60 未満の秒とします。
</p>


<h2>Input</h2>
<p>
$S$ が１行に与えられます。
</p>
<h2>Output</h2>
<p>
$h$、$m$、$s$ を <span>:</span>（コロン）区切りで１行に出力してください。数値が１桁の場合、0 を付けて２桁表示をする必要はありません。
</p>


<h2>Constraints</h2>

<ul>
<li>$ 0 \leq S < 86400$</li>
</ul>


<h2>Sample Input</h2>
<pre>
46979
</pre>

<h2>Sample Output</h2>
<pre>
13:2:59
</pre>"
ITLP1,2,A,ITP1_2_A,"
<H1>大小関係</H1><br>

<p>
２つの整数 <i>a</i>, <i>b</i> を読み込んで、<i>a</i> と <i>b</i> の大小関係を出力するプログラムを作成して下さい。
</p>

<H2>Input</H2>
<p>
入力は空白で区切られた２つの整数 <i>a</i>, <i>b</i> から構成されています。
</p>

<H2>Output</H2>

<p>
<i>a</i> より <i>b</i> の方が大きければ
</p>

<pre>
a &lt; b
</pre>

<p>
<i>a</i> より <i>b</i> の方が小さければ、
</p>

<pre>
a &gt; b
</pre>

<p>
<i>a</i> と <i>b</i> が等しければ、
</p>

<pre>
a == b
</pre>

<p>
と出力して下さい。
</p>

<h2>Constraints</h2>

<ul>
<li> -1,000 &le; <i>a</i>, <i>b</i> &le; 1,000</li>
</ul>


<H2>Sample Input 1</H2>

<pre>
1 2
</pre>

<H2>Sample Output 1</H2>

<pre>
a &lt; b
</pre>

<H2>Sample Input 2</H2>

<pre>
4 3
</pre>

<H2>Sample Output 2</H2>

<pre>
a &gt; b
</pre>

<H2>Sample Input 3</H2>

<pre>
5 5
</pre>

<H2>Sample Output 3</H2>

<pre>
a == b
</pre>"
ITLP1,2,B,ITP1_2_B,"
<H1>範囲</H1><br>

<p>
３つの整数a, b, cを読み込み、それらが a &lt; b &lt; cの条件を満たすならば""<span>Yes</span>""を、満たさないならば""<span>No</span>""を出力するプログラムを作成して下さい。
</p>

<H2>Input</H2>
<p>
３つの整数が空白で区切られて与えられます。
</p>

<H2>Output</H2>

<p>
<span>Yes</span>または<span>No</span>を１行に出力して下さい。
</p>


<h2>Constraints</h2>

<ul>
<li> 0 &le; <i>a</i>, <i>b</i>, <i>c</i> &le; 100</li>
</ul>


<H2>Sample Input 1</H2>

<pre>
1 3 8
</pre>

<H2>Sample Output 1</H2>

<pre>
Yes
</pre>

<H2>Sample Input 2</H2>

<pre>
3 8 1
</pre>

<H2>Sample Output 2</H2>

<pre>
No
</pre>"
ITLP1,2,C,ITP1_2_C,"
<H1>3 つの数の整列</H1><br>

<p>
３つの整数を読み込み、それらを値が小さい順に並べて出力するプログラムを作成して下さい。
</p>


<H2>Input</H2>
<p>
３つの整数が空白で区切られて与えられます。
</p>


<H2>Output</H2>

<p>
小さい順に並べ替えた３つの整数を１行に出力して下さい。整数の間に１つの空白を入れて下さい。
</p>

<h2>Constraints</h2>

<ul>
<li> 1 &le; ３つの整数 &le; 10,000</li>
</ul>


<H2>Sample Input</H2>

<pre>
3 8 1
</pre>


<H2>Sample Output</H2>

<pre>
1 3 8
</pre>"
ITLP1,2,D,ITP1_2_D,"
<H1>長方形の中の円</H1><br>

<p>
長方形の中に円が含まれるかを判定するプログラムを作成してください。次のように、長方形は左下の頂点を原点とし、右上の頂点の座標 $(W, H)$ が与えられます。また、円はその中心の座標 $(x, y)$ と半径 $r$ で与えられます。
</p>

<center>
<br>
<img src=""https://judgeapi.u-aizu.ac.jp/resources/images/IMAGE2_circle_and_rectangle"" title=""長方形の中の円"" alt=""長方形の中の円"">
<br>
</center>
<br>

<h2>Input</h2>

<p>
５つの整数 $W$、$H$、$x$、$y$、$r$ が空白区切りで１行に与えられます。
</p>

<h2>Output</h2>

<p>
円が長方形の内部に含まれるなら <span>Yes</span> と、一部でもはみ出るならば <span>No</span> と１行に出力してください。</p>


<h2>Constraints</h2>

<ul>
<li>$ -100 \leq x, y \leq 100$</li>
<li>$ 0 < W, H, r \leq 100$</li>
</ul>


<h2>Sample Input 1</h2>
<pre>
5 4 2 2 1
</pre>

<h2>Sample Output 1</h2>
<pre>
Yes
</pre>

<h2>Sample Input 2</h2>
<pre>
5 4 2 4 1
</pre>

<h2>Sample Output 2</h2>
<pre>
No
</pre>"
ITLP1,3,A,ITP1_3_A,"
<H1>複数の Hello World の出力</H1><br>

<p>
1000 個の ""Hello World"" を出力するプログラムを作成して下さい。
</p>

<H2>Input</H2>
<p>
この問題に入力はありません。
</p>

<H2>Output</H2>

<p>
各行に ""Hello World"" と書かれた 1000 行の文字列を出力して下さい。
</p>

<H2>Sample Input</H2>

<pre>
No input
</pre>

<H2>Sample Output</H2>

<pre>
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
.
.
.
.
.
.
Hello World
</pre>"
ITLP1,3,B,ITP1_3_B,"
<H1>テストケースの出力</H1><br>

<p>
オンラインジャッジでは、提出されたプログラムが複数の入力データそれぞれに対して正しい出力を行っているかを判定するために、１つの入力データファイルに複数のデータセットが含まれているものがあります。この問題は、そのようなデータセットを処理するための練習問題です。
</p>

<p>
１つの整数 <i>x</i> を読み込み、それをそのまま出力するプログラムを作成して下さい。
</p>

<p>
ただし、この問題は以下に示すようにいくつかのデータセットが与えられることに注意して下さい。
</p>


<H2>Input</H2>

<p>
入力は複数のデータセットから構成されています。各データセットは１つの整数 <i>x</i> を含む１行から構成されています。
</p>

<p>
<i>x</i> が 0 のとき入力の終わりを示し、このデータセットに対する出力を行ってはいけません。
</p>


<H2>Output</H2>

<p>
各データセットごとに、以下の形式で <i>x</i> を出力して下さい：
</p>

<pre>
Case i: x
</pre>

<p>
ここで、<span>i</span> は１から始まるデータセットの番号を示します。<span>Case</span>と番号 <span>i</span>の間に１つの空白を入れて下さい。また、:（コロン）と整数 <span>x</span> の間に１つの空白を入れて下さい。サンプル入出力を参考にして下さい。
</p>

<h2>Constraints</h2>

<ul>
<li> 1 &le; <i>x</i> &le; 10,000</li>
<li>データセットの数は 10,000 を超えない。</li>
</ul>


<H2>Sample Input</H2>

<pre>
3
5
11
7
8
19
0
</pre>



<H2>Sample Output</H2>

<pre>
Case 1: 3
Case 2: 5
Case 3: 11
Case 4: 7
Case 5: 8
Case 6: 19
</pre>"
ITLP1,3,C,ITP1_3_C,"
<H1>2 つの数の交換</H1><br>

<p>
２つの整数 <i>x</i>, <i>y</i> を読み込み、それらを値が小さい順に出力するプログラムを作成して下さい。
</p>

<p>
ただし、この問題は以下に示すようにいくつかのデータセットが与えられることに注意して下さい。
</p>


<H2>Input</H2>

<p>
入力は複数のデータセットから構成されています。各データセットは空白で区切られた２つの整数 <i>x</i>, <i>y</i> を含む１行から構成されています。
</p>

<p>
<i>x</i> と <i>y</i> がともに 0 のとき入力の終わりを示し、このデータセットに対する出力を行ってはいけません。
</p>


<H2>Output</H2>

<p>
各データセットごとに、<i>x</i> と <i>y</i> を小さい順に並べたものを１行に出力して下さい。<i>x</i> と <i>y</i> の間には１つの空白を入れて下さい。
</p>

<h2>Constraints</h2>

<ul>
<li> 0 &le; <i>x</i>, <i>y</i> &le; 10,000</li>
<li>データセットの数は 3,000 を超えない。</li>
</ul>



<H2>Sample Input</H2>

<pre>
3 2
2 2
5 3
0 0
</pre>

<H2>Sample Output</H2>

<pre>
2 3
2 2
3 5
</pre>
"
ITLP1,3,D,ITP1_3_D,"
<h1>約数の数</h1><br>

<p>
３つの整数 $a$、$b$、$c$ を読み込み、$a$ から $b$ までの整数の中に、$c$ の約数がいくつあるかを求めるプログラムを作成してください。
</p>

<h2>Input</h2>
<p>
$a$、$b$、$c$ が１つの空白区切りで１行に与えられます。
</p>

<h2>Output</h2>
<p>
約数の数を１行に出力してください。
</p>

<h2>Constraints</h2>

<ul>
<li>$ 1 \leq a, b, c \leq 10000$</li>
<li>$ a \leq  b$</li>
</ul>

<h2>Sample Input</h2>
<pre>
5 14 80
</pre>

<h2>Sample Output</h2>
<pre>
3
</pre>"
ITLP1,4,A,ITP1_4_A,"
<H1>割り算</H1><br>

<p>
２つの整数 <i>a</i> と <i>b</i> を読み込んで、以下の値を計算するプログラムを作成して下さい：
</p>

<ul>
<li>a &divide; b ： <i>d</i> (整数)</li>
<li>a &divide; b の余り ： <i>r</i> (整数)</li>
<li>a &divide; b ： <i>f</i> (浮動小数点数)</li>
</ul>

<H2>Input</H2>
<p>
1行に２つの整数 <i>a</i>, <i>b</i> が与えられます。
</p>

<H2>Output</H2>

<p>
<i>d</i>, <i>r</i>, <i>f</i> を１つの空白で区切って１行に出力して下さい。<i>f</i>については、0.00001以下の誤差があってもよいものとします。
</p>


<H2>Constraints</H2>


<ul>
<li>1 &le; <i>a</i>, <i>b</i> &le; 10<sup>9</sup></li>
</ul>

<H2>Sample Input</H2>

<pre>
3 2
</pre>

<H2>Sample Output</H2>

<pre>
1 1 1.50000
</pre>"
ITLP1,4,B,ITP1_4_B,"<H1>円の面積と円周</H1><br>


<p>
半径 <i>r</i> の円の面積と円周の長さを求めるプログラムを作成して下さい。
</p>


<H2>Input</H2>
<p>
１つの実数 <i>r</i> が与えられます。
</p>

<H2>Output</H2>

<p>
面積と円周の長さを１つの空白で区切って１行に出力して下さい。出力は浮動小数点数とし、0.00001 以下の誤差を含んでもよいものとします。
</p>

<H2>Constraints</H2>

<ul>
<li>0 &lt; <i>r</i> &lt; 10,000</li>
</ul>

<H2>Sample Input 1</H2>

<pre>
2
</pre>



<H2>Sample Output 1</H2>

<pre>
12.566371 12.566371
</pre>

<H2>Sample Input 2</H2>

<pre>
3
</pre>


<H2>Sample Output 2</H2>

<pre>
28.274334 18.849556
</pre>


"
ITLP1,4,C,ITP1_4_C,"
<H1>計算機</H1><br>

<p>
２つの整数 <i>a</i>, <i>b</i> と１つの演算子 <i>op</i> を読み込んで、<i>a</i> <i>op</i> <i>b</i> を計算するプログラムを作成して下さい。ただし、演算子 <i>op</i> は、""<span>+</span>""(和)、""<span>-</span>""(差)、""<span>*</span>""(積)、""<span>/</span>""(商)、のみとし、割り算で割り切れない場合は、小数点以下を切り捨てたものを計算結果とします。
</p>


<H2>Input</H2>
<p>
入力は複数のデータセットから構成されています。各データセットの形式は以下のとおりです：
</p>

<p>
<i>a</i> <i>op</i> <i>b</i>
</p>

<p>
<i> op </i> が '?' のとき 入力の終わりを示します。このケースの出力は行ってはいけません。
</p>


<H2>Output</H2>

<p>
各データセットについて、計算結果を１行に出力して下さい。
</p>

<H2>Constraints</H2>
<ul>
<li> 0 &le; a, b &le; 20000</li>
<li> 0 による割り算が与えられることはありません。</li>
</ul>

<H2>Sample Input</H2>

<pre>
1 + 2
56 - 18
13 * 2
100 / 10
27 + 81
0 ? 0
</pre>

<H2>Sample Output</H2>

<pre>
3
38
26
10
108
</pre>"
ITLP1,4,D,ITP1_4_D,"
<h1>最小値、最大値、合計値</h1><br>

<p>
$n$ 個の整数 $a_i (i = 1, 2, ... n)$を入力し、それらの最小値、最大値、合計値を求めるプログラムを作成してください。
</p>

<h2>Input</h2>
<p>
１行目に整数の数 $n$ が与えられます。２行目に $n$ 個の整数 $a_i$ が空白区切りで与えられます。
</p>

<h2>Output</h2>
<p>
最小値、最大値、合計値を空白区切りで１行に出力してください。
</p>


<h2>Constraints</h2>

<ul>
<li>$0 < n \leq 10000$</li>
<li>$-1000000 \leq a_i \leq 1000000$</li>
</ul>

<h2>Sample Input</h2>
<pre>
5
10 1 5 4 17
</pre>

<h2>Sample Output</h2>

<pre>
1 17 37
</pre>"
ITLP1,5,A,ITP1_5_A,"<H1>長方形の描画</H1><br>

<p>
たて<i>H</i> cm よこ <i>W</i> cm の長方形を描くプログラムを作成して下さい。
</p>

<p>
1 cm &times; 1cm の長方形を '<span>#<span>'で表します。
</p>


<H2>Input</H2>
<p>
入力は複数のデータセットから構成されています。各データセットの形式は以下のとおりです：
</p>

<p>
<i>H</i> <i>W</i>
</p>

<p>
<i>H</i>, <i>W</i> がともに 0 のとき、入力の終わりとします。
</p>

<H2>Output</H2>

<p>
各データセットについて、<i>H</i> &times; <i>W</i> 個の '<span>#<span>' で描かれた長方形を出力して下さい。
</p>

<p>
各データセットの後に、１つの空行を入れて下さい。
</p>

<h2>Constraints</h2>
<ul>
<li>  1 &le; <i>H</i> &le; 300</li>
<li>  1 &le; <i>W</i> &le; 300</li>
</ul>


<H2>Sample Input</H2>

<pre>
3 4
5 6
2 2
0 0
</pre>

<H2>Sample Output</H2>

<pre>
####
####
####

######
######
######
######
######

##
##

</pre>
"
ITLP1,5,B,ITP1_5_B,"<H1>フレームの描画</H1><br>

<p>
以下のような、たて<i>H</i> cm よこ <i>W</i> cm の枠を描くプログラムを作成して下さい。
</p>

<pre>
##########
#........#
#........#
#........#
#........#
##########
</pre>

<p>
上図は、たて 6 cm よこ 10 cm の枠を表しています。
</p>

<H2>Input</H2>
<p>
入力は複数のデータセットから構成されています。各データセットの形式は以下のとおりです：
</p>

<p>
<i>H</i> <i>W</i>
</p>

<p>
<i>H</i>, <i>W</i> がともに 0 のとき、入力の終わりとします。
</p>

<H2>Output</H2>
<p>
各データセットについて、たて <i>H</i> cm よこ <i>W</i> cm の枠を出力して下さい。
</p>

<p>
各データセットの後に、１つの空行を入れて下さい。
</p>

<h2>Constraints</h2>
<ul>
  <li>3 &le; <i>H</i> &le; 300</li>
  <li>3 &le; <i>W</i> &le; 300</li>
</ul>>

<H2>Sample Input</H2>

<pre>
3 4
5 6
3 3
0 0
</pre>



<H2>Sample Output</H2>

<pre>
####
#..#
####

######
#....#
#....#
#....#
######

###
#.#
###

</pre>
"
ITLP1,5,C,ITP1_5_C,"<H1>チェスボードの描画</H1><br>

<p>
以下のような、たて<i>H</i> cm よこ <i>W</i> cm のチェック柄の長方形を描くプログラムを作成して下さい。
</p>

<pre>
#.#.#.#.#.
.#.#.#.#.#
#.#.#.#.#.
.#.#.#.#.#
#.#.#.#.#.
.#.#.#.#.#
</pre>

<p>
上図は、たて 6 cm よこ 10 cm の長方形を表しています。
</p>

<p>
長方形の左上が ""<span>#</span>"" となるように描いて下さい。
</p>


<H2>Input</H2>
<p>
入力は複数のデータセットから構成されています。各データセットの形式は以下のとおりです：
</p>

<p>
<i>H</i> <i>W</i>
</p>

<p>
<i>H</i>, <i>W</i> がともに 0 のとき、入力の終わりとします。
</p>

<H2>Output</H2>

<p>
各データセットについて、たて <i>H</i> cm よこ <i>W</i> cm の枠を出力して下さい。
</p>

<p>
各データセットの後に、１つの空行を入れて下さい。
</p>


<h2>Constraints</h2>
<ul>
  <li>1 &le; <i>H</i> &le; 300</li>
  <li>1 &le; <i>W</i> &le; 300</li>
</ul>

<H2>Sample Input</H2>

<pre>
3 4
5 6
3 3
2 2
1 1
0 0
</pre>



<H2>Sample Output</H2>

<pre>
#.#.
.#.#
#.#.

#.#.#.
.#.#.#
#.#.#.
.#.#.#
#.#.#.

#.#
.#.
#.#

#.
.#

#

</pre>
"
ITLP1,5,D,ITP1_5_D,"
<h1>構造化プログラミング</h1><br>
 
<p>
goto 文は、C/C++言語などで使うことのできる文で、実行されると無条件に指定されたラベルに処理が飛びます。例えば <span>goto CHECK_NUM;</span> という文が実行されると、プログラムの中で <span>CHECK_NUM:</span> と書かれた行に処理が移ります。この機能を使って、繰り返し処理なども実現することができます。
</p>

<p>
一方、goto 文は自由度が高すぎ、プログラムの可読性に影響するため、可能な限り使わないことが推奨されています。
</p>

<p>
次のC++言語のプログラムと同じ動作をするプログラムを作成してください。ただし、goto 文は使わないで実装してみましょう。
</p>

<pre>
void call(int n){
  int i = 1;
 CHECK_NUM:
  int x = i;
  if ( x % 3 == 0 ){
    cout << "" "" << i;
    goto END_CHECK_NUM;
  }
 INCLUDE3:
  if ( x % 10 == 3 ){
    cout << "" "" << i;
    goto END_CHECK_NUM;
  }
  x /= 10;
  if ( x ) goto INCLUDE3;
 END_CHECK_NUM:
  if ( ++i <= n ) goto CHECK_NUM;

  cout << endl;
}
</pre>

<h2>Input</h2>
<p>
１つの整数 $n$ が１行に与えられます。
</p>

<h2>Output</h2>
<p>
上記プログラムに入力の整数 $n$ を与えた結果を出力してください。
</p>

<h2>Constraints</h2>
<ul>
<li>$3 \leq n \leq 10000$</li>
</ul>

<h2>Sample Input</h2>

<pre>
30
</pre>

<h2>Sample Output</h2>

<pre>
 3 6 9 12 13 15 18 21 23 24 27 30
</pre>
<p>
※先頭に空白を出力することに注意してください。
</p>

"
ITLP1,6,A,ITP1_6_A,"
<H1>数列の反転</H1><br>

<p>
与えられた数列を逆順に出力するプログラムを作成して下さい。
</p>


<H2>Input</H2>
<p>
入力は以下の形式で与えられます：
</p>

<pre>
<var>n</var>
<var>a</var><sub>1</sub> <var>a</var><sub>2</sub> . . . <var>a</var><sub><var>n</var></sub>
</pre>

<p>
<var>n</var> は数列の長さを示し、<var>a<sub>i</sub></var> は <var>i</var> 番目の数を表します。
</p>



<H2>Output</H2>

<p>
逆順の数列を１行に出力して下さい。数列の要素の間に１つの空白を入れて下さい（最後の数の後に空白は入らないことに注意して下さい）。
</p>

<h2>Constraints</h2>
<ul>
<li><var>n</var> &le; 100</li>
<li>0 &le; <var>a<sub>i</sub></var> &lt; 1000</li>
</ul>


<H2>Sample Input 1</H2>

<pre>
5
1 2 3 4 5
</pre>

<H2>Sample Output 1</H2>

<pre>
5 4 3 2 1
</pre>

<H2>Sample Input 2</H2>

<pre>
8
3 3 4 4 5 8 7 9
</pre>

<H2>Sample Output 2</H2>

<pre>
9 7 8 5 4 4 3 3
</pre>
"
ITLP1,6,B,ITP1_6_B,"
<H1>不足しているカードの発見</H1><br>

<p>
太郎が花子と一緒にトランプ遊びをしようとしたところ、52枚あるはずのカードが n 枚のカードしか手元にありません。これらの n 枚のカードを入力として、足りないカードを出力するプログラムを作成して下さい。
</p>

<p>
太郎が最初に持っていたトランプはジョーカーを除く52枚のカードです。
</p>

<p>
52枚のカードは、スペード、ハート、クラブ、ダイヤの４つの絵柄に分かれており、各絵柄には13のランクがあります。
</p>


<H2>Input</H2>
<p>
最初の行に太郎が持っているカードの枚数 n (n &le; 52)が与えられます。
</p>

<p>
続いて <i>n</i> 組のカードがそれぞれ１行に与えられます。各組は１つの空白で区切られた文字と整数です。文字はカードの絵柄を表し、スペードが'<span>S</span>'、ハートが'<span>H</span>'、クラブが'<span>C</span>'、ダイヤが'<span>D</span>'で表されています。整数はそのカードのランク(1 〜 13)を表しています。
</p>

<H2>Output</H2>

<p>
足りないカードをそれぞれ1行に出力して下さい。各カードは入力と同様に１つの空白で区切られた文字と整数です。出力するカードの順番は以下のとおりとします：
</p>

<ul>
<li>絵柄がスペード、ハート、クラブ、ダイヤの順番で優先的に出力する。</li>
<li>絵柄が同じ場合は、ランクが小さい順に出力する。</li>
</ul>

<H2>Sample Input</H2>

<pre>
47
S 10
S 11
S 12
S 13
H 1
H 2
S 6
S 7
S 8
S 9
H 6
H 8
H 9
H 10
H 11
H 4
H 5
S 2
S 3
S 4
S 5
H 12
H 13
C 1
C 2
D 1
D 2
D 3
D 4
D 5
D 6
D 7
C 3
C 4
C 5
C 6
C 7
C 8
C 9
C 10
C 11
C 13
D 9
D 10
D 11
D 12
D 13
</pre>

<H2>Sample Output</H2>

<pre>
S 1
H 3
H 7
C 12
D 8
</pre>
"
ITLP1,6,C,ITP1_6_C,"<H1>公舎の入居者数</H1><br>

<p>
Ａ大学は１フロア１０部屋、３階建ての公舎４棟を管理しています。公舎の入居・退去の情報を読み込み、各部屋の入居者数を出力するプログラムを作成して下さい。
</p>

<p>
n件の情報が与えられます。各情報では、４つの整数b, f, r, vが与えられます。これは、b棟f階のr番目の部屋にv人が追加で入居したことを示します。vが負の値の場合、-v人退去したことを示します。
</p>

<p>
最初、全ての部屋には誰も入居していないものとします。
</p>

<H2>Input</H2>
<p>
最初の行に情報の数 n が与えられます。
</p>

<p>
続いて <i>n</i> 件の情報が与えられます。各情報には４つの整数 b, f, r, v が空白区切りで１行に与えられます。
</p>


<H2>Output</H2>

<p>
４棟について入居者数を出力して下さい。各棟について、１階、２階、３階の順に入居者数を出力します。各階については、１番目、２番目、・・・、１０番目の部屋の入居者数を順番に出力します。入居者数の前には１つの空白を出力して下さい。また、各棟の間には<span>####################</span>(20個の<span>#</span>)で区切って下さい。
</p>

<h2>Constraints</h2>
<ul>
<li>間違った棟番号・階・部屋番号は与えられない。</li>
<li>管理の過程で１部屋の入居者数が０より少なくなることはない。</li>
<li>管理の過程で１部屋の入居者数が9より多くなることはない。</li>
</ul>

<H2>Sample Input</H2>

<pre>
3
1 1 3 8
3 2 2 7
4 3 8 1
</pre>



<H2>Sample Output</H2>

<pre>
 0 0 8 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0
####################
 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0
####################
 0 0 0 0 0 0 0 0 0 0
 0 7 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0
####################
 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 1 0 0
</pre>

"
ITLP1,6,D,ITP1_6_D,"
<h1>ベクトルと行列の積</h1><br>

<p>
$ n \times m$ の行列 $A$ と、$m \times 1$ の列ベクトル$b$ を読み込み、$A$ と $b$ の積を出力するプログラムを作成してください。
</p>

<p>
次のように $m$ 個の数を縦に並べたものを $m \times 1$の列ベクトルと呼びます。
</p>

\[
  b = \left(
    \begin{array}{c}
      b_1  \\
      b_2  \\
      : \\ 
      b_m \\ 
    \end{array}
  \right)
\]

<p>
次のように $n$ 個の数を含む列ベクトルを $m$ 個横に並べたものを $n \times m$ の行列と呼びます。
</p>


\[
  A = \left(
    \begin{array}{cccc}
      a_{11} & a_{12} & ... & a_{1m} \\
      a_{21} & a_{22} & ... & a_{2m} \\
       :    &   :   &  :  &  : \\
      a_{n1} & a_{n2} & ... & a_{nm} \\
    \end{array}
  \right)
\]

<p>
ベクトルまたは行列の中に含まれる数のことを要素と呼び、$m \times 1$ の列ベクトル $b$ の上から $i$ 番目の要素は $b_i (i = 1,2,..., m)$、$n \times m$ の行列 $A$ には $n \times m$ 個の要素が含まれ、$i$ 行 $j$ 列目の要素は $a_{ij} (i = 1, 2, ..., n, j = 1, 2, ..., m)$で示されます。
</p>

<p>
$n \times m$の行列 $A$ と$m \times 1$の列ベクトル $b$ の積は、$n \times 1$の列ベクトル $c$ となり、$c$ の $i$ 番目の要素 $c_i$ は次の式で得られます：
</p>


\[
c_i = \sum_{j=1}^m a_{ij}b_j  = a_{i1}b_1 + a_{i2}b_2 + ... + a_{im}b_m
\]


<h2>Input</h2>
<p>
１行目に $n$ と $m$ が空白区切りで与えられます。続く $n$ 行に行列 $A$ の要素 $a_{ij}$ が空白区切りで与えられます。続く $m$ 行にベクトル $b$ の要素 $b_i$ がそれぞれ１行に与えられます。
</p>

<h2>Output</h2>
<p>
出力は $n$ 行からなります。ベクトル $c$ の要素 $c_i$ をそれぞれ１行に出力してください。
</p>

<h2>Constraints</h2>
<ul>
<li>$1 \leq n, m \leq 100$</li>
<li>$0 \leq b_i, a_{ij} \leq 1000$</li>
</ul>

<h2>Sample Input</h2>
<pre>
3 4
1 2 0 1
0 3 0 1
4 1 1 0
1
2
3
0
</pre>


<h2>Sample Output</h2>
<pre>
5
6
9
</pre>

"
ITLP1,7,A,ITP1_7_A,"<H1>成績</H1><br>

<p>
あなたの課題は、あるクラスの数学の成績を付けるプログラムを作成することです。
</p>

<p>
プログラムは複数の学生のテストの点数を読み込みます。
</p>

<p>
テストの点数は、中間試験の点数 <i>m</i>、期末試験の点数 <i>f</i>、再試験の点数 <i>r</i> で構成されています。
</p>

<p>
中間試験と期末試験は 50 点満点（<i>m</i>, <i>f</i> &le; 50）、再試験は 100 点満点 （<i>r</i> &le; 100）です。
</p>

<p>
試験を受けていない場合は点数を -1 とします。
</p>

<p>
以下の手順で成績が付けられます：
</p>

<ul>
<li>中間試験、期末試験のいずれかを欠席した場合成績は  <span>F</span>。 </li>
<li>中間試験と期末試験の合計点数が 80 以上ならば成績は <span>A</span> 。</li>
<li>中間試験と期末試験の合計点数が 65 以上 80 未満ならば成績は <span>B</span>。 </li>
<li>中間試験と期末試験の合計点数が 50 以上 65 未満ならば成績は <span>C</span>。 </li>
<li>中間試験と期末試験の合計点数が 30 以上 50 未満ならば成績は <span>D</span>。 ただし、再試験の点数が 50 以上ならば成績は <span>C</span>。</li>
<li>中間試験と期末試験の合計点数が 30 未満ならば成績は <span>F</span>。</li>
</ul>


<H2>Input</H2>
<p>
複数のデータセットが入力として与えられます。各データセットでは、空白で区切られた <i>m</i>、<i>f</i>、<i>r</i> が 1 行に与えられます。
</p>

<p>
 <i>m</i>、<i>f</i>、<i>r</i> がすべて -1 のとき入力の終わりとします。
</p>

<p>
データセットの数（生徒の数）は 50 を超えません。
</p>



<H2>Output</H2>

<p>
各データセットについて、成績（<span>A</span>、<span>B</span>、<span>C</span>、<span>D</span>、または <span>F</span>）を１行に出力して下さい。
</p>

<H2>Sample Input</H2>

<pre>
40 42 -1
20 30 -1
0 2 -1
-1 -1 -1
</pre>

<H2>Sample Output</H2>

<pre>
A
C
F
</pre>

"
ITLP1,7,B,ITP1_7_B,"
<H1>組み合わせの数</H1><br>

<p>
1 から <i>n</i> までの数の中から、重複無しで３つの数を選びそれらの合計が <i>x</i> となる組み合わせの数を求めるプログラムを作成して下さい。
</p>

<p>
例えば、1 から 5 までの数から３つを選んでそれらの合計が 9 となる組み合わせは、
</p>

<ul>
<li>1 + 3 + 5 = 9</li>
<li>2 + 3 + 4 = 9</li>
</ul>

<p>
の２通りがあります。
</p>


<H2>Input</H2>
<p>
複数のデータセットが入力として与えられます。各データセットでは、空白で区切られた <i>n</i>、<i>x</i> が 1 行に与えられます。
</p>

<p>
<i>n</i>、<i>x</i> がともに 0 のとき入力の終わりとします。
</p>

<h2>Constraints</h2>
<ul>
<li> 3 &le; <var>n</var> &le; 100</var>
<li> 0 &le; <var>x</var> &le; 300</var>
</ul>


<H2>Output</H2>

<p>
各データセットについて、組み合わせの数を１行に出力して下さい。
</p>

<H2>Sample Input</H2>

<pre>
5 9
0 0
</pre>

<H2>Sample Output</H2>

<pre>
2
</pre>
"
ITLP1,7,C,ITP1_7_C,"
<H1>表計算</H1><br>

<p>
表計算を行う簡単なプログラムを作成します。
</p>

<p>
表の行数rと列数c、r &times; c の要素を持つ表を読み込んで、各行と列の合計を挿入した新しい表を出力するプログラムを作成して下さい。
</p>

<H2>Input</H2>
<p>
最初の行にrとcが空白区切りで与えられます。続くr行にそれぞれc個の整数が空白区切りで与えられます。
</p>

<H2>Output</H2>

<p>
(r+1) &times (c+1) の新しい表を出力して下さい。各行の隣り合う整数は１つの空白で区切って下さい。各行の最後の列としてその行の合計値を、各列の最後の行としてその列の合計値を、最後の行・列に表全体の合計値を挿入して下さい。
</p>

<H2>Constraints</H2>

<ul>
<li> 1 &le; r, c &le; 100</li>
<li> 0 &le; 要素 &le; 100</li>
</ul>


<H2>Sample Input</H2>

<pre>
4 5
1 1 3 4 5
2 2 2 4 5
3 3 0 1 1
2 3 4 4 6
</pre>

<H2>Sample Output</H2>

<pre>
1 1 3 4 5 14
2 2 2 4 5 15
3 3 0 1 1 8
2 3 4 4 6 19
8 9 9 13 17 56
</pre>
"
ITLP1,7,D,ITP1_7_D,"
<h1>行列の積</h1><br>

<p>
$n \times m$ の行列 $A$ と $m \times l$ の行列 $B$ を入力し、それらの積である $n \times l$ の行列 $C$ を出力するプログラムを作成してください。行列 $C$ の各要素 $c_{ij}$ は次の式で得られます：
</p>



\[
c_{ij} = \sum_{k=1}^m a_{ik}b_{kj}
\]

<p>
ここで、$A$、$B$、$C$ の各要素をそれぞれ $a_{ij}$、$b_{ij}$、$c_{ij}$ とします。
</p>

<h2>Input</h2>
<p>
１行目に $n$、$m$、$l$ が空白区切りで与えられます。
</p>
<p>
続く行に $n \times m$ の行列 $A$ と $m \times l$ の行列 $B$ が与えられます。
</p>

<h2>Output</h2>

<p>
$n \times l$ の行列 $C$ の要素 $c_{ij}$ を出力してください。各行の隣り合う要素を１つの空白で区切ってください。
</p>

<h2>Constraints</h2>

<ul>
<li>$1 \leq n, m, l \leq 100$</li>
<li>$0 \leq a_{ij}, b_{ij} \leq 10000$</li>
</ul>

<h2>Sample Input</h2>

<pre>
3 2 3
1 2
0 3
4 5
1 2 1
0 3 2
</pre>


<h2>Sample Output</h2>

<pre>
1 8 5
0 9 6
4 23 14
</pre>
"
ITLP1,8,A,ITP1_8_A,"
<H1>大文字と小文字の入れ替え</H1><br>

<p>
与えられた文字列の小文字と大文字を入れ替えるプログラムを作成してください。
</p>


<H2>Input</H2>

<p>
文字列が1行に与えられます。
</p>

<H2>Output</H2>

<p>
与えられた文字列の小文字と大文字を入れ替えた文字列を出力して下さい。アルファベット以外の文字はそのまま出力して下さい。
</p>

<h2>Constraints</h2>

<ul>
<li>入力される文字列の長さ &lt; 1200</li>
</ul>

<H2>Sample Input</H2>

<pre>
fAIR, LATER, OCCASIONALLY CLOUDY.
</pre>

<H2>Sample Output</H2>

<pre>
Fair, later, occasionally cloudy.
</pre>
"
ITLP1,8,B,ITP1_8_B,"
<H1>数字の和</H1><br>

<p>
与えられた数の各桁の和を計算するプログラムを作成して下さい。
</p>


<H2>Input</H2>

<p>
複数のデータセットが入力として与えられます。各データセットは１つの整数 <i>x</i> を含む１行で与えられます。
</p>

<p>
<i>x</i> は 1000 桁以下の整数です。
</p>

<p>
<i>x</i> が 0 のとき入力の終わりとします。このデータセットに対する出力を行ってはいけません。
</p>

<H2>Output</H2>

<p>
各データセットに対して、<i>x</i> の各桁の和を１行に出力して下さい。
</p>

<H2>Sample Input</H2>

<pre>
123
55
1000
0
</pre>

<H2>Sample Output</H2>

<pre>
6
10
1
</pre>
"
ITLP1,8,C,ITP1_8_C,"
<H1>文字のカウント</H1><br>

<p>
与えられた英文に含まれる、各アルファベットの数を数えるプログラムを作成して下さい。
なお、小文字と大文字は区別しません。
</p>


<H2>Input</H2>

<p>
複数の行にまたがる１つの英文が与えられます。
</p>

<H2>Output</H2>

<p>
与えられた英文に含まれる各アルファベットの数を以下に示す形式で出力して下さい：
</p>

<pre>
a : <i>aの個数</i>
b : <i>bの個数</i>
c : <i>cの個数</i>
  .
  .
z : <i>zの個数</i>
</pre>

<h2>Constraints</h2>

<ul>
<li>英文が含む文字の数 &lt; 1200</li>
</ul>

<H2>Sample Input</H2>

<pre>
This is a pen.
</pre>

<H2>Sample Output</H2>

<pre>
a : 1
b : 0
c : 0
d : 0
e : 1
f : 0
g : 0
h : 1
i : 2
j : 0
k : 0
l : 0
m : 0
n : 1
o : 0
p : 1
q : 0
r : 0
s : 2
t : 1
u : 0
v : 0
w : 0
x : 0
y : 0
z : 0
</pre>
"
ITLP1,8,D,ITP1_8_D,"
<h1>リング</h1><br>

<p>
図のようなリング状の文字列 $s$ の任意の位置から、時計回りに連続した文字をいくつか選んで、文字列 $p$ が作れるかを判定するプログラムを作成してください。
</p>


<br>
<center>
<img src=""https://judgeapi.u-aizu.ac.jp/resources/images/IMAGE2_ITP1_8_D"">
</center>
<br>

<h2>Input</h2>
<p>
１行目に文字列 $s$ が与えられます。<br>
２行目に文字列 $p$ が与えられます。
</p>

<h2>Output</h2>

<p>
$p$ が作れる場合は <span>Yes</span> と、作れない場合は <span>No</span> と１行に出力してください。
</p>

<h2>Constraints</h2>

<ul>
<li>$1 \leq p の長さ \leq s の長さ \leq 100$</li>
<li>文字列は英小文字からなる</li>
</ul>

<h2>Sample Input 1</h2>
<pre>
vanceknowledgetoad
advance
</pre>

<h2>Sample Output 1</h2>

<pre>
Yes
</pre>
<br>
<h2>Sample Input 2</h2>
<pre>
vanceknowledgetoad
advanced
</pre>

<h2>Sample Output 2</h2>
<pre>
No
</pre>
"
ITLP1,9,A,ITP1_9_A,"<H1>単語の検索</H1><br>

<p>
１つの単語 <var>W</var> と文章 <var>T</var> が与えられます。<var>T</var> の中にある <var>W</var> の数を出力するプログラムを作成して下さい。
</p>

<p>文章 <var>T</var> に含まれるスペースまたは改行で区切られた文字列を単語 <var>T<sub>i</sub></var> とします。すべての <var>T<sub>i</sub></var> において単語 <var>W</var> と同じになるものを数えて下さい。
</p>

<p>
なお、大文字と小文字は区別しません。
</p>

<H2>Constraints</H2>

<ul>
  <li> <var>W</var>の文字列の長さは10を超えない</li>
  <li><var>W</var>に含まれる文字はすべてアルファベット小文字である</li>
  <li> <var>T</var>の１行あたりの文字列の長さは1000を超えない</li>
</ul>


<H2>Input</H2>

<p>
１行目に単語 <var>W</var> が与えられます。
</p>
<p>
続いて、複数の行にまたがった文章与えられます。<span>END_OF_TEXT</span> という文字列が文章の終わりを示します。
</p>

<H2>Output</H2>

<p>
単語 <var>W</var> の数を出力して下さい。
</p>


<H2>Sample Input</H2>

<pre>
computer
Nurtures computer scientists and highly-skilled computer engineers
who will create and exploit ""knowledge"" for the new era.
Provides an outstanding computer environment.
END_OF_TEXT
</pre>

<H2>Sample Output</H2>

<pre>
3
</pre>
"
ITLP1,9,B,ITP1_9_B,"<H1>シャッフル</H1><br>

<p>
１つのアルファベットが描かれた <i>n</i> 枚のカードの山をシャッフルします。
</p>

<p>
1回のシャッフルでは、下から <i>h</i> 枚のカードをまとめて取り出し、それを残ったカードの山の上に積み上げます。
</p>

<p>
カードの山は以下のように１つの文字列で与えられます。
</p>

<pre>
abcdeefab
</pre>

<p>
最初の文字が一番下にあるカード、最後の文字が一番上にあるカードを示しています。
</p>

<p>
例えば、これを <i>h</i> が 4 でシャッフルすると、最初の4文字 <span>abcd</span> が、残りの文字 <span>eefab</span> の末尾へ連結されるので以下のようになります：
</p>

<pre>
eefababcd
</pre>

<p>
このシャッフルを何回か繰り返します。
</p>

<p>
カードの山の最初の並び（文字列）と <i>h</i> の列を読み込み、最後の並び（文字列）を出力するプログラムを作成して下さい。
</p>

<H2>Input</H2>

<p>
複数のデータセットが入力として与えられます。各データセットは以下の形式で与えられます：
</p>

<pre>
最初の並びを表す文字列
シャッフル回数 <i>m</i>
<i>h</i><sub>1</sub>
<i>h</i><sub>2</sub>
  .
  .
<i>h</i><sub><i>m</i></sub>
</pre>

<p>
最初の並びを表す文字列が ""-"" のとき入力の終わりとします。
</p>

<H2>Constraints</H2>

<ul>
<li>1 &le; 文字列の長さ&le; 200</li>
<li>1 &le; <i>m</i> &le; 100</li>
<li>1 &le; <i>h<sub>i</sub></i> &lt; 文字列の長さ</li>
<li>データセットの数は10を超えない</li>
</ul>

<H2>Output</H2>

<p>
各データセットに対して、最後の並び（文字列）を１行に出力して下さい。
</p>

<H2>Sample Input</H2>

<pre>
aabc
3
1
2
1
vwxyz
2
3
4
-
</pre>

<H2>Sample Output</H2>

<pre>
aabc
xyzvw
</pre>

"
ITLP1,9,C,ITP1_9_C,"
<H1>カードゲーム</H1><br>

<p>
太郎と花子がカードゲームをする。二人はそれぞれn枚のカードを持っており、nターンの勝負を行う。各ターンではそれぞれ１枚ずつカードを出す。カードにはアルファベットからなる動物の名前が書かれており、辞書順で大きいものがそのターンの勝者となる。勝者には３ポイント、引き分けの場合にはそれぞれ１ポイントが加算される。
</p>

<p>
太郎と花子の手持ちのカードの情報を読み込み、ゲーム終了後のそれぞれの得点を出力するプログラムを作成せよ。
</p>

<h2>Constraints</h2>
<ul>
<li>入力で与えられるｎが1000を超えることはない。</li>
<li>与えられる文字列の長さは100以下であり、アルファベットの小文字のみを含む。</li>
</ul>

<H2>Input</H2>

<p>
一行目にカードの数ｎが与えられる。続くn行に各ターンのカードの情報が与えられる。１つ目の文字列が太郎のカードに書かれている文字列、２つ目の文字列が花子のカードに書かれている文字列である。
</p>




<H2>Output</H2>

<p>
１つ目の数字が太郎の得点、２つ目の数字が花子の得点として１行に出力せよ。２つの数字の間に１つの空白を出力せよ。
</p>

<H2>Sample Input</H2>

<pre>
3
cat dog
fish fish
lion tiger
</pre>

<H2>Sample Output</H2>

<pre>
1 7
</pre>"
ITLP1,9,D,ITP1_9_D,"
<h2>文字列変換</h2><br>

<p>
文字列 $str$ に対して、与えられた命令の列を実行するプログラムを作成してください。命令は以下の操作のいずれかです：
</p>


<ul>
<li><span>print a b</span>: $str$ の <apan>a</span> 文字目から <span>b</span> 文字目までを出力する。</li>
<li><span>reverse a b</span>: $str$ の <span>a</span> 文字目から <span>b</span> 文字目までを逆順にする。</li>
<li><span>replace a b p</span>: $str$ の <span>a</span> 文字目から <span>b</span> 文字目までを <span>p</span> に置き換える。</li>
</ul>
<p>
ここでは、文字列 $str$ の最初の文字を 0 文字目とします。
</p>

<h2>Input</h2>
<p>
1 行目に文字列 $str$ が与えられます。$str$ は英小文字のみ含みます。2 行目に命令の数 $q$ が与えられます。続く $q$ 行に各命令が上記の形式で与えられます。
</p>

<h2>Output</h2>
<p>
各 <span>print</span> 命令ごとに文字列を１行に出力してください。
</p>


<h2>Constraints</h2>

<ul>
<li>$1 \leq str の長さ \leq 1000$</li>
<li>$1 \leq q \leq 100$</li>
<li>$0 \leq a \leq b < str の長さ$</li>
<li>replace 命令では $b - a + 1 = p の長さ$</li>
</ul>

<h2>Sample Input 1</h2>
<pre>
abcde
3
replace 1 3 xyz
reverse 0 2
print 1 4
</pre>

<h2>Sample Output 1</h2>
<pre>
xaze
</pre>


<h2>Sample Input 2</h2>
<pre>
xyz
3
print 0 2
replace 0 2 abc
print 0 2
</pre>

<h2>Sample Output 2</h2>
<pre>
xyz
abc
</pre>
"
ITLP1,10,A,ITP1_10_A,"
<H1>距離</H1><br>

<p>
２点 P1(x1, y1), P2(x2, y2) の距離を求めるプログラムを作成せよ。
</p>


<H2>Input</H2>

<p>
x1, y1, x2, y2 （実数）が空白区切りで与えられます。
</p>


<H2>Output</H2>

<p>
P1とP2の距離を実数で１行に出力して下さい。0.0001以下の誤差があってもよいものとします。
</p>

<H2>Sample Input</H2>

<pre>
0 0 1 1
</pre>

<H2>Sample Output</H2>

<pre>
1.41421356
</pre>

"
ITLP1,10,B,ITP1_10_B,"
<H1>三角形</H1><br>

<p>
三角形の２辺 a, b とその間の角 C から、その三角形の面積 S、周の長さ L, a を底辺としたときの高さ h を求めるプログラムを作成して下さい。
</p>


<H2>Input</H2>

<p>
a の長さ, b の長さ, Cの大きさ（度）（整数）が空白区切りで与えられます。
</p>


<H2>Output</H2>

<p>
S, L, h をそれぞれ1行に出力して下さい。0.0001以下の誤差があってもよいものとします。
</p>

<H2>Sample Input</H2>

<pre>
4 3 90
</pre>

<H2>Sample Output</H2>

<pre>
6.00000000
12.00000000
3.00000000
</pre>"
ITLP1,10,C,ITP1_10_C,"
<H1>標準偏差</H1><br>

<p>
n 人の学生を含むクラスでプログラミングの試験を行った。それぞれの得点をs<sub>1</sub>, s<sub>2</sub> ... s<sub>n</sub>としたときの、標準偏差を求めるプログラムを作成せよ。
</p>

<p>
得点の平均値をｍとすれば、分散&alpha;<sup>2</sup>は以下の式で得られる：
</p>

<p>
&alpha;<sup>2</sup>  = (&sum;<sup>n</sup><sub><i>i</i>=1</sub>(s<sub><i>i</i></sub> - m)<sup>2</sup>)/n
</p>

<p>
分散の正の平方根が標準偏差&alpha;となる。
</p>



<H2>Input</H2>

<p>
複数のデータセットが入力として与えられる。各データセットは以下の形式で与えられる：
</p>

<pre>
学生の数 <i>n</i>
<i>s</i><sub>1</sub> <i>s</i><sub>2</sub> ... <i>s</i><sub><i>n</i></sub>
</pre>

<p>
n が 0 のとき入力の終わりとする。
</p>

<H2>Output</H2>

<p>
各データセットに対して、標準偏差を１行に出力せよ。ただし、0.0001以下の誤差があってもよい。
</p>


<H2>Constraints</H2>


<ul>
<li>入力で与えられる n が1000を超えることはない。</li>

<li>0 &le; <i>s<sub>i</sub></i> &le; 100 </li>
</ul>



<H2>Sample Input</H2>

<pre>
5
70 80 100 90 20
3
80 80 80
0
</pre>

<H2>Sample Output</H2>

<pre>
27.85677655
0.00000000
</pre>"
ITLP1,10,D,ITP1_10_D,"
<h1>ミンコフスキー距離</h1><br>

<p>
２つのデータがどれだけ似ているかを、それらの距離で測る手法は、クラスタリングや分類など、様々なところで使われています。ここでは、２つの $n$ 次元ベクトル $x = \{x_1, x_2, ..., x_n\}$ と $y = \{y_1, y_2, ..., y_n\}$ の距離を計算してみましょう。
</p>

<p>
このようなデータの距離を測る指標のひとつとして、次のミンコフスキー距離が知られています。
<br>
\[
D_{xy} = (\sum_{i=1}^n |x_i - y_i|^p)^{\frac{1}{p}}
\]
<br>

$p = 1$ のとき
<br>

\[
D_{xy} = |x_1 - y_1| + |x_2 - y_2| + ... + |x_n - y_n|
\]

<br>

となり、これはマンハッタン距離とよばれます。
<br>
<br>
$p = 2$ のとき
<br>
\[
D_{xy} = \sqrt{(|x_1 - y_1|)^{2} + (|x_2 - y_2|)^{2} + ... + (|x_n - y_n|)^{2}}
\]
<br>
となり、これは一般的に使われるユークリッド距離になります。 
<br>
<br>
$p = \infty$ のとき
<br>
<br>
\[
D_{xy} = max_{i=1}^n (|x_i - y_i|)
\]
<br>
<br>
となり、これはチェビシェフ距離と呼ばれます。
</p>

<p>

２つの $n$ 次元ベクトルが与えられるので、$p$ がそれぞれ 1、2、3、$\infty$ のミンコフスキー距離を求めるプログラムを作成してください。
</p>

<h2>Input</h2>
<p>
１行目に整数 $n$ が与えられます。２行目にベクトル $x$ の要素 $\{x_1, x_2, ... x_n\}$、３行目にベクトル $y$ の要素 $\{y_1, y_2, ... y_n\}$ が空白区切りで与えられます。入力はすべて整数値です。
</p>

<h2>Output</h2>
<p>
$p$ がそれぞれ 1、2、3、$\infty$ の順番にそれぞれ１行に距離を出力してください。ただし、0.00001 以下の誤差があってもよいものとします。
</p>

<h2>Constraints</h2>
<ul>
<li>$1 \leq n \leq 100$</li>
<li>$0 \leq x_i, y_i \leq 1000$</li>
</ul>

<h2>Sample Input</h2>
<pre>
3
1 2 3
2 0 4
</pre>


<h2>Sample Output</h2>

<pre>
4.000000
2.449490
2.154435
2.000000
</pre>
"
ITLP1,11,A,ITP1_11_A,"
<h1>サイコロ I</h1><br>

<p>
次の展開図から得られるサイコロを転がすシミュレーションを行うプログラムを作成してください。
</p>

<br>
<center>
<img src=""https://judgeapi.u-aizu.ac.jp/resources/images/IMAGE2_ITP1_11_A_1""><br>
<img src=""https://judgeapi.u-aizu.ac.jp/resources/images/IMAGE2_ITP1_11_A_2""><br>
</center>



<br><br>

<p>
サイコロの各面には図のとおりに 1 から 6 のラベルが割りあてられています。
</p>
<p>
入力としてサイコロの各面のラベルに対応する整数と、転がす命令の列が与えられるので、サイコロの上面の整数を出力してください。シミュレーションの初期状態は、図のとおりのラベルの位置でサイコロが置かれているものとします。
</p>

<h2>Input</h2>
<p>
１行目に各面の整数が、図に示すラベルの順番に空白区切りで与えられます。
</p>

<p>
２行目に命令を表す１つの文字列が与えられます。命令はそれぞれ図に示す４方向を表す文字 <span>E</span>、<span>N</span>、<span>S</span>、<span>W</span> を含む文字列です。
</p>

<h2>Output</h2>
<p>
すべての命令を実行した後のサイコロの上面の数を１行に出力してください。
</p>

<h2>Constraints</h2>

<ul>
<li>$0 \leq $ 入力されるサイコロの面の数字 $ \leq 100$</li>
<li>$0 \leq $ 命令を表す文字列の長さ $ \leq 100$</li>
</ul>

<h2>Note</h2>

<p>
続くシリーズ Dice III, Dice IV では、複数のサイコロを扱うので、サイコロをクラスや構造体で作成しておきましょう。
</p>

<h2>Sample Input 1</h2>
<pre>
1 2 4 8 16 32
SE
</pre>
<h2>Sample Output 1</h2>

<pre>
8
</pre>

<p>
各面に 1, 2, 4, 8, 16, 32 と書かれたサイコロを <span>S</span> の方向に転がした後、<span>E</span> の方向に転がすと、上面の整数が 8 になります。
</p>

<br><br>

<h2>Sample Input 2</h2>
<pre>
1 2 4 8 16 32
EESWN
</pre>

<h2>Sample Output 2</h2>
<pre>
32
</pre>

"
ITLP1,11,B,ITP1_11_B,"
<h1>サイコロ II</h1><br>

<p>
Dice I と同様の方法で、入力された整数の列からサイコロをつくります。
</p>
<p>
このサイコロを Dice I の方法で回転させた後の上面と前面の整数が質問として与えられるので、右側の面の整数を答えるプログラムを作成してください。
</p>

<br>
<center>
<img src=""https://judgeapi.u-aizu.ac.jp/resources/images/IMAGE2_ITP1_11_B"">
</center>
<br><br>

<h2>Input</h2>
<p>
１行目に各面の整数が、ラベルの順番に空白区切りで与えられます。<br>
２行目に質問の数 $q$ が与えられます。
</p>
<p>
続く $q$ 行に質問が与えられます。各質問では上面と前面の整数が空白区切りで１行に与えられます。
</p>

<h2>Output</h2>


<p>
各質問ごとに、サイコロの右側の面の整数を１行に出力してください。
</p>


<h2>Constraints</h2>

<ul>
<li>$0 \leq $ 入力されるサイコロの面の整数 $ \leq 100$</li>
<li>入力されるサイコロの面の整数はすべて異なる</li>
<li>$1 \leq q \leq 24$</li>
</ul>

<h2>Sample Input</h2>
<pre>
1 2 3 4 5 6
3
6 5
1 3
3 2
</pre>

<h2>Sample Output</h2>
<pre>
3
5
6
</pre>

"
ITLP1,11,C,ITP1_11_C,"
<h1>サイコロ III</h1><br>

<p>
Dice I と同様の方法で、入力された整数から２つのサイコロをつくります。これらが同一のものか判定するプログラムを作成してください。Dice I の方法でサイコロを回転させ、２つのサイコロのそれぞれの６方向から見た整数が全て一致するとき、同一のサイコロとみなします。
</p>

<h2>Input</h2>
<p>
１行目に１つ目のサイコロの各面の整数が、ラベルの順番に空白区切りで与えられます。<br>
２行目に２つ目のサイコロの各面の整数が、ラベルの順番に空白区切りで与えられます。
</p>


<h2>Output</h2>
<p>
２つのサイコロが同一ならば ""<span>Yes</span>"" と、異なるならば ""<span>No</span>"" と１行に出力してください。
</p>

<h2>Constraints</h2>

<ul>
<li>$0 \leq $ 入力されるサイコロの面の整数 $ \leq 100$</li>
</ul>

<h2>Sample Input 1</h2>
<pre>
1 2 3 4 5 6
6 2 4 3 5 1
</pre>

<h2>Sample Output 1</h2>
<pre>
Yes
</pre>

<br>

<h2>Sample Input 2</h2>
<pre>
1 2 3 4 5 6
6 5 4 3 2 1
</pre>

<h2>Sample Output 2</h2>
<pre>
No
</pre>
"
ITLP1,11,D,ITP1_11_D,"
<h1>サイコロ IV</h1><br>


<p>
Dice I と同様の方法で、入力された整数から $n$ 個のサイコロをつくります。これらのサイコロが、全て異なるものかどうかを判定するプログラムを作成してください。同一かどうかの判定は Dice III の方法を用います。
</p>


<h2>Input</h2>
<p>
１行目にサイコロの個数 $n$ が与えられます。続く $n$ 行に各サイコロの面の整数が与えられます。
</p>
<p>
各サイコロについて各面の整数が、ラベルの順番に空白区切りで１行に与えられます。
</p>

<h2>Output</h2>

<p>
入力されたサイコロがすべて異なる場合 ""<span>Yes</span>""、同じものが１組以上含まれる場合 ""<span>No</span>"" と１行に出力してください。
</p>

<h2>Constraints</h2>

<ul>
<li>$2 \leq n \leq 100$</li>
<li>$0 \leq $ 入力されるサイコロの面の整数 $ \leq 100$</li>
</ul>

<h2>Sample Input 1</h2>
<pre>
3
1 2 3 4 5 6
6 2 4 3 5 1
6 5 4 3 2 1
</pre>

<h2>Sample Output 1</h2>
<pre>
No
</pre>
<br>

<h2>Sample Input 2 </h2>
<pre>
3
1 2 3 4 5 6
6 5 4 3 2 1
5 4 3 2 1 6
</pre>
<h2>Sample Output 2</h2>
<pre>
Yes
</pre>"
